if (!is.null(contour))
stop("Error: user requested a density legend plot and contour. However, in the current version it is not possible to do both.")
legend = getLegendAsDensity(dataToPlot, color, minColor, maxColor, legendTitle, legendAreaWidth, textSizeLegendTitle, textSizeNumbers, colorPalette,legendBreaks,legendBreakLabels,densityTransformationFunction)
}
# If the legend style is 'default'
if (legendStyle == "default"){
if (is.null(colorFactorLevels)){
# If colorFactorLevels is NOT specified: return the default legend for continuous color values
legend =getDefaultLegendContinuous(dataframe,
color,
legendTitle,
colorPalette,
minColor,
maxColor,
contour,
contourPalette,
firstContourArgumentDenotesNumberOfGroups,
legendAreaWidth,legendWidth, legendHeight, textSizeLegendTitle, legendBreaks,legendBreakLabels, textSizeNumbers)
} else {
legend = getDefaultLegendDiscrete(dataframe,
color,
legendTitle,
colorPalette,
colorFactorLevels,
colorFactorLabels,
contour,
contourPalette,
firstContourArgumentDenotesNumberOfGroups,
legendAreaWidth,legendWidth, legendHeight, textSizeLegendTitle, legendBreaks,legendBreakLabels, textSizeNumbers)
}
}
if (legendStyle == "abstract"){
legend = getAbstractLegend(dataToPlot, color, minColor, maxColor, legendTitle, legendAreaWidth, textSizeLegendTitle, textSizeNumbers, colorPalette, abstractLegendLabels)
}
# Add the required white spaces
layoutMatrix = matrix(seq(1,9,1), ncol =3, byrow=T)
leg = grid.arrange(grobs = list(emptyPlot(),emptyPlot(),emptyPlot(),emptyPlot(), legend, emptyPlot(),emptyPlot(),emptyPlot(),emptyPlot()),
layout = layoutMatrix,
heights = unit.c(
unit((legendAreaHeight - legendHeight)/2, "cm"),
unit(legendHeight, "cm"),
unit((legendAreaHeight - legendHeight)/2, "cm") ),
widths = unit.c(
unit((legendAreaWidth - legendWidth)/2, "cm"),
unit(legendWidth, "cm"),
unit((legendAreaWidth - legendWidth)/2, "cm") )
)
return (leg)
}
# Return the default (i.e., standard) legend grob when the color shows continuous values
getDefaultLegendContinuous = function(dataframe,
color,
legendTitle,
colorPalette,
minColor,
maxColor,
contour,
contourPalette,
firstContourArgumentDenotesNumberOfGroups,
legendAreaWidth,legendWidth, legendHeight, textSizeLegendTitle, legendBreaks,legendBreakLabels, textSizeNumbers){
x = seq(0,1,0.1)
y = seq(0,1,0.1)
d = as.data.frame(expand.grid(x,y))
colnames(d)= c("x", "y")
d$col = rnorm(nrow(d), 0, 1)
d$con = rnorm(nrow(d), 0, 1)
if (is.null(legendTitle)){
legtitle = splitString(color$var$shortName, unit(legendAreaWidth, units = "cm"))
} else {
legtitle = splitString(legendTitle, unit(legendAreaWidth, units='cm'))
}
limitsCol = c(minColor-0.025*abs(minColor), maxColor+0.025*abs(maxColor))
p = ggplot(data=d, aes(x=x, y = y, fill = col))+
geom_tile()+
theme(legend.position       = "right",
legend.background = element_rect(colour = 'black', fill = NA, linetype='solid'),
legend.title.align=0.5,
legend.title          = element_text(size=textSizeLegendTitle),
legend.text           = element_text(size=textSizeNumbers))
#Are the breaks specified by the user? If so, force the legend to have breaks. Otherwise, let ggplot figure out where the ticks go
if (is.null(legendBreaks)){
p=p+ scale_fill_gradientn(legtitle,limits = limitsCol, colours = colorPalette)
} else if (is.null(legendBreakLabels)){
p=p+ scale_fill_gradientn(legtitle,limits = limitsCol, colours = colorPalette, breaks = legendBreaks)
} else {
p=p+ scale_fill_gradientn(legtitle,limits = limitsCol, colours = colorPalette, breaks = legendBreaks, labels = legendBreakLabels)
}
if (!is.null(contour) && length(contourPalette) >1){
if (firstContourArgumentDenotesNumberOfGroups){
width = (max(agg$c) - min(agg$c))/(contour$levels[[1]]+1)
breaksContour = round(seq(0, contour$levels[[1]]-1)*width + min(agg$c), digits=3)
# if firstContourArgumentDenotesNumberOfGroups==F: draw a line at each specified level
} else {
breaksContour = contour$levels
}
contTitle = splitString(contour$var$shortName, unit(legendAreaWidth, units = "cm"))
limitsCont = c(min(breaksContour), max(breaksContour))
p = p + geom_contour(aes(z=con, colour = ..level..),  breaks = contour$levels,   size = 0.75) +
scale_color_gradientn(name = contTitle, colors=contourPalette, limits =limitsCont)+
guides(color= guide_colorbar(barheight=unit(legendHeight/2, "cm"), barwidth = unit(legendWidth, "cm"), order = 0),
fill = guide_colorbar(barheight=unit(legendHeight/2, "cm"), barwidth = unit(legendWidth, "cm"), order = 1))
} else {
p=p+guides(fill= guide_colorbar(barheight=unit(legendHeight, "cm"), barwidth = unit(legendWidth, "cm")))
}
# This part is created by stackoverflow user "dickoa" at:
# https://stackoverflow.com/questions/11883844/inserting-a-table-under-the-legend-in-a-ggplot2-histogram
tmp <- ggplot_gtable(ggplot_build(p))
leg <- which(sapply(tmp$grobs, function(x) x$name) ==  "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
# Return the default (i.e., standard) legend grob when the color shows discrete values
getDefaultLegendDiscrete = function(dataframe,
color,
legendTitle,
colorPalette,
colorFactorLevels,
colorFactorLabels,
contour,
contourPalette,
firstContourArgumentDenotesNumberOfGroups,
legendAreaWidth,legendWidth, legendHeight, textSizeLegendTitle, legendBreaks,legendBreakLabels, textSizeNumbers){
x = seq(0,1,0.1)
y = seq(0,1,0.1)
d = as.data.frame(expand.grid(x,y))
colnames(d)= c("x", "y")
d$col = as.factor( rep(colorFactorLevels, ceiling(nrow(d)/length(colorFactorLevels)))[1:nrow(d)] )
d$con = rnorm(nrow(d), 0, 1)
if (is.null(legendTitle)){
legtitle = splitString(color$var$shortName, unit(legendAreaWidth, units = "cm"))
} else {
legtitle = splitString(legendTitle, unit(legendAreaWidth, units='cm'))
}
if (is.null(colorFactorLabels))
colorFactorLabels = colorFactorLevels
p = ggplot(data=d, aes(x=x, y = y, fill = col))+
geom_tile()+
scale_fill_manual(legtitle, values = colorPalette, labels = colorFactorLabels,  guide=guide_legend(reverse=TRUE))+
theme(
legend.background = element_rect(colour = 'black', fill = NA, linetype='solid'),
legend.title.align=0.5,
legend.title          = element_text(size=textSizeLegendTitle),
legend.text           = element_text(size=textSizeNumbers))
# Extract the legend for the color values
tmp = ggplot_gtable(ggplot_build(p))
legendColor = tmp$grobs[[which(sapply(tmp$grobs, function(x) x$name) ==  "guide-box")]]
# If there is no contour: we are done, return the legend
if (is.null(contour) || length(contourPalette) == 1)
return (legendColor)
# Else, add the contour plot to the legend
if (firstContourArgumentDenotesNumberOfGroups){
width = (max(agg$c) - min(agg$c))/(contour$levels[[1]]+1)
breaksContour = round(seq(0, contour$levels[[1]]-1)*width + min(agg$c), digits=3)
# if firstContourArgumentDenotesNumberOfGroups==F: draw a line at each specified level
} else {
breaksContour = contour$levels
}
# We cannot place contour lines over p, as p has discrete color values
# We can however, create a plot for the contour plot and transplot the legend from p on q's color legend
contTitle = splitString(contour$var$shortName, unit(legendAreaWidth, units = "cm"))
limitsCont = c(min(breaksContour), max(breaksContour))
q = ggplot(data=d, aes(x=x, y = y, fill = con))+
geom_tile() +
geom_contour(aes(z=con, colour = ..level..),  breaks = contour$levels,   size = 0.75) +
scale_color_gradientn(name = contTitle, colors=contourPalette, limits =limitsCont)+
theme(
legend.background = element_rect(colour = 'black', fill = NA, linetype='solid'),
legend.title.align=0.5,
legend.title          = element_text(size=textSizeLegendTitle),
legend.text           = element_text(size=textSizeNumbers))+
guides(color= guide_colorbar(barheight=unit(legendHeight/2, "cm"), barwidth = unit(legendWidth, "cm"), order = 0, reverse = T),
fill = guide_colorbar(barheight=unit(legendHeight/2, "cm"), barwidth = unit(legendWidth, "cm"), order = 1))
# Grab the legend for the color
tmp = ggplot_gtable(ggplot_build(q))
legendContour = tmp$grobs[[ which(sapply(tmp$grobs, function(x) x$name) ==  "guide-box") ]]
legendContour$grobs[[1]] = legendColor
return(legendContour)
}
# Create and return a density plot that is used as a legend
getLegendAsDensity = function(dataToPlot, color, minColor, maxColor, legendTitle, legendAreaWidth, textSizeLegendTitle, textSizeNumbers, colorPalette,legendBreaks,legendBreakLabels, densityTransformationFunction){
# Get all the z values from all data frames in heatPlotData
colorValues = dataToPlot$z
# In the heat plots themselves the color limits run from
# limitsCol = c(minColor-0.025*abs(minColor), maxColor+0.025*abs(maxColor))
# Here we have to add groups with these (impossible) values too, otherwise the span of the color palettes are unequal
limitsCol = c(minColor-0.025*abs(minColor), maxColor+0.025*abs(maxColor))
# compute density scores
density = density(colorValues, adjust = 1, from = limitsCol[1], to = limitsCol[2], kernel = 'cosine')
plotData = data.frame(x=density$x, y = density$y)
# If specified, apply the densityTransformationFunction
if (!is.null(densityTransformationFunction))
plotData$y = densityTransformationFunction(plotData$y)
# Devide the full range of the bar (the bar, not the observed data!) in 100 equal groups
groups = 100
groupLength = (maxColor - minColor)/groups
plotData$group  = floor( (plotData$x-minColor) / groupLength)
plotData$group = (plotData$group < 1) * 1 + (plotData$group>=1)*plotData$group
plotData$group = (plotData$group > groups) * 100 + (plotData$group<=100)*plotData$group
segmentData = data.frame(matrix(NA, ncol=3, nrow=0))
colnames(segmentData) = c("x", "y", "group")
# The problem with geom_ribbon is that white bars appear in between segments.
# These white bars appear because there are no points between two segments.
# To fill them up, figure out for each segment what the coordinates in between that segment
# and its neighboring segments are, and add those mid points.
for (i in 1:(groups+1)){
# Get all the coordinates for the current segment (if that segment is not empty)
subsetCurrent=subset(plotData, group == i)
if (nrow(subsetCurrent)>1){
# Add the point between the point that lies in between the current and previous (if applicable) segment
if (i != 1){
subsetPrevious = subset(plotData, group == (i-1))
if (nrow(subsetPrevious)>0){
coordPrevious = subset(subsetPrevious, x == max(subsetPrevious$x))
coordCurrent = subset(subsetCurrent, x == min(subsetCurrent$x))
coordInBetweenX = (coordPrevious$x+coordCurrent$x)/2
coordInBetweenY = (coordPrevious$y+coordCurrent$y)/2
subsetCurrent[nrow(subsetCurrent)+1,] = c(coordInBetweenX,0,i)
subsetCurrent[nrow(subsetCurrent)+1,] = c(coordInBetweenX,coordInBetweenY,i)
}
} else {
subsetCurrent[nrow(subsetCurrent)+1,] = c(limitsCol[1]-0.000001,0,i)
}
# Add the point between the point that lies in between the current and next (if applicable) segment
if (i != (groups+1)){
subsetNext = subset(plotData, group == (i+1))
if (nrow(subsetNext)>0){
coordNext = subset(subsetNext, x == min(subsetNext$x))
coordCurrent = subset(subsetCurrent, x == max(subsetCurrent$x))
coordInBetweenX = (coordNext$x+coordCurrent$x)/2
coordInBetweenY = (coordNext$y+coordCurrent$y)/2
subsetCurrent[nrow(subsetCurrent)+1,] = c(coordInBetweenX,coordInBetweenY,i)
subsetCurrent[nrow(subsetCurrent)+1,] = c(coordInBetweenX,0,i)
}
} else {
subsetCurrent[nrow(subsetCurrent)+1,] = c(max(subsetCurrent$x),0,i)
}
#Order the data
subsetCurrent = subsetCurrent[order(subsetCurrent$x), ]
# Add all the normal points
segmentData=rbind(segmentData, subsetCurrent)
}
}
# get max density
maxDensity = max(segmentData$y)
# Make sure all the values in limitCol are in the plot
segmentData[nrow(segmentData)+1,] = c(minColor-0.025*abs(minColor),0,0)
if (nrow(subset(segmentData, group == (groups+1)))==0)
segmentData[nrow(segmentData)+1,] = c(maxColor+0.025*abs(maxColor),0,groups+2)
# if legendBreaks is NULL, determine where the breaks in the legend should be
if (is.null(legendBreaks)){
midBreak = (minColor+maxColor)/2
breaks = c(minColor, (minColor+midBreak)/2, midBreak, (midBreak+maxColor)/2, maxColor)
}else {
breaks = legendBreaks
}
# Determine the break labels
if (!is.null(legendBreakLabels)){
breakLabels = legendBreakLabels
} else {
breakLabels = breaks
}
# Make a color key data frame to plot the left-hand side color spectrum
colorKey = data.frame(matrix(NA, ncol=3, nrow=0))
colnames(colorKey) = c("x", "y", "group")
yStart = -maxDensity/10
yStop  = yStart -(maxDensity/10)
for (i in 1:(groups+1)){
colorKey[nrow(colorKey)+1,] = c(minColor+(groupLength*(i-1)),yStop,i)
colorKey[nrow(colorKey)+1,] = c(minColor+(groupLength*(i-1)),yStart,i)
colorKey[nrow(colorKey)+1,] = c(minColor+(groupLength*(i)),yStart,i)
colorKey[nrow(colorKey)+1,] = c(minColor+(groupLength*(i)),yStop,i)
}
# Determine the title
if (is.null(legendTitle)){
legendTitle = splitString(color$var$shortName, unit(legendAreaWidth, units = "cm"))
} else {
legendTitle = splitString(legendTitle, unit(legendAreaWidth, units='cm'))
}
p=ggplot(segmentData, aes(x=x,y=y)) +
ggtitle(legendTitle)+
geom_polygon(data = colorKey, aes(fill = group, group = group, x=x, y =y  ))+
geom_segment(x=breaks[1], y=yStop, xend=breaks[1], yend = maxDensity, size = 0.7, linetype = "solid", color = "grey70")+
geom_segment(x=breaks[2], y=yStop, xend=breaks[2], yend = maxDensity, size = 0.7, linetype = "solid", color = "grey70")+
geom_segment(x=breaks[3], y=yStop, xend=breaks[3], yend = maxDensity, size = 0.7, linetype = "solid", color = "grey70")+
geom_segment(x=breaks[4], y=yStop, xend=breaks[4], yend = maxDensity, size = 0.7, linetype = "solid", color = "grey70")+
geom_segment(x=breaks[5], y=yStop, xend=breaks[5], yend = maxDensity, size = 0.7, linetype = "solid", color = "grey70")+
geom_line(data=plotData, aes(x=x,y=y),size=0.7, alpha =0.8, color = "grey50")+
geom_polygon(aes(fill = group, group = group))+
geom_label(data = data.frame(x = breaks[1], y = maxDensity*0.7, label = format(round(breaks[1], digits = 2), nsmall=2)), aes(x = x, y = y, label = label), size=textSizeNumbers*(5/14), fill = "grey90", alpha = 0.5)+
geom_label(data = data.frame(x = breaks[2], y = maxDensity*0.7, label = format(round(breaks[2], digits = 2), nsmall=2)), aes(x = x, y = y, label = label), size=textSizeNumbers*(5/14), fill = "grey90", alpha = 0.5)+
geom_label(data = data.frame(x = breaks[3], y = maxDensity*0.7, label = format(round(breaks[3], digits = 2), nsmall=2)), aes(x = x, y = y, label = label), size=textSizeNumbers*(5/14), fill = "grey90", alpha = 0.5)+
geom_label(data = data.frame(x = breaks[4], y = maxDensity*0.7, label = format(round(breaks[4], digits = 2), nsmall=2)), aes(x = x, y = y, label = label), size=textSizeNumbers*(5/14), fill = "grey90", alpha = 0.5)+
geom_label(data = data.frame(x = breaks[5], y = maxDensity*0.7, label = format(round(breaks[5], digits = 2), nsmall=2)), aes(x = x, y = y, label = label), size=textSizeNumbers*(5/14), fill = "grey90", alpha = 0.5)+
scale_fill_gradientn(colours = colorPalette)+
coord_flip()+
scale_x_continuous(limits = c(limitsCol[1]-0.0001, limitsCol[2]+0.0001 ), position = "top", breaks= breaks)+
scale_y_continuous(position = "left")+
theme(
plot.background = element_rect(fill = NA, colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5, size=textSizeLegendTitle),
legend.position = "none")
return (p)
}
# Create and return an abstract legend - a color key with a directional arrow, but without any values
getAbstractLegend = function(dataToPlot, color, minColor, maxColor, legendTitle, legendAreaWidth, textSizeLegendTitle, textSizeNumbers, colorPalette, abstractLegendLabels){
# Get all the z values from all data frames in heatPlotData
colorValues = dataToPlot$z
# In the heat plots themselves the color limits run from
# limitsCol = c(minColor-0.025*abs(minColor), maxColor+0.025*abs(maxColor))
# Here we have to add groups with these (impossible) values too, otherwise the span of the color palettes are unequal
limitsCol = c(minColor-0.025*abs(minColor), maxColor+0.025*abs(maxColor))
# Devide the full range of the bar (the bar, not the observed data!) in 100 equal groups
groups = 100
groupLength = 1/groups
# Make a color key data frame to plot the left-hand side color spectrum
# xStop controls what percentage of the legend is dedicated to the color bar
colorKey = data.frame(matrix(NA, ncol=3, nrow=0))
colnames(colorKey) = c("x", "y", "group")
xStart = 0.025
xStop  = 0.6
for (i in 1:(groups)){
colorKey[nrow(colorKey)+1,] = c(xStop, (groupLength*(i-1)),i)
colorKey[nrow(colorKey)+1,] = c(xStart,(groupLength*(i-1)),i)
colorKey[nrow(colorKey)+1,] = c(xStart, (groupLength*(i)),i)
colorKey[nrow(colorKey)+1,] = c(xStop, (groupLength*(i)),i)
}
# Determine the title
if (is.null(legendTitle))
legendTitle = color$var$shortName
lowestColor = colorPalette[1]
invertedLowestColor = (255-col2rgb(lowestColor))/255
invertedLowestColor = rgb(invertedLowestColor[1], invertedLowestColor[2], invertedLowestColor[3], 1)
if (is.null(abstractLegendLabels))
abstractLegendLabels = c("High", "Low")
if (length(abstractLegendLabels) != 2)
error("The length of abstractLegendLabels is unequal to 2. The abstract legend has two end points, both of which have to be labeled.")
p=ggplot(colorKey) +
geom_segment(x=0, y=0.05, xend=xStop+xStart, yend = 0.05, size = 1, linetype = "solid", color = "black")+
geom_segment(x=0, y=0.95, xend=xStop+xStart, yend = 0.95, size = 1, linetype = "solid", color = "black")+
geom_polygon(aes(fill = group, group = group, x=x, y =y  ) )+
geom_rect(xmin = xStart, xmax = xStop, ymin = 0, ymax = 1, fill = NA, color = "black")+
geom_text(data = data.frame(x = (xStop-xStart)/2, y = 0.05, label = abstractLegendLabels[2]), aes(x = x, y = y, label = label), size=textSizeNumbers*(5/14), hjust="center", vjust = "center", color = invertedLowestColor)+
geom_text(data = data.frame(x = (xStop-xStart)/2, y = 0.95, label = abstractLegendLabels[1]), aes(x = x, y = y, label = label), size=textSizeNumbers*(5/14), hjust="center", vjust = "center", color = lowestColor)+
geom_text(data = data.frame(x = (1-xStop)/2+xStop, y = 0.5, label = legendTitle), aes(x = x, y = y, label = label), size=textSizeLegendTitle*(5/14), hjust="center", vjust = "center", angle = -90)+
scale_fill_gradientn(colours = colorPalette)+
xlim(0,1)+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "none")
return (p)
}
# Creates and returns a completely empty plot. Useful for spacing.
emptyPlot = function(){
return (
ggplot()+geom_blank(aes(1,1))+
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank()))
}
# Creates and returns a completely empty plot with a missingColor background. Useful for indicating missing rows/columns.
missingPlot = function(missingColor){
return (
ggplot()+geom_blank(aes(1,1))+
theme(
panel.background = element_rect(fill = missingColor, colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank())
)
}
#########################################################################
#///////////////////////////////////////////////////////////////////////#
#////     Supporing function: other functions     //////////////////////#
#///////////////////////////////////////////////////////////////////////#
#########################################################################
# This function takes a raw string and transforms it into a formatted, multi-lined expression that
# can be parsed by a textGrob. It is possible to include Greek sign's and other commands from
# plotMath. To include a command from plotMath, place the command between two '<>'s. For instance,
# to create a (mu_substript), use the command <>mu['subscript']<>. Make sure that there is no space
# within the expression. This function only supports mono fontfamilies (otherwise the justification does
# not work).
parseDescription= function(text, widthOfGrob, textSize, fontfamily = 'mono'){
# Make sure that there is always a space between <>'s
newlineString = gsub("<><>", "<> <>", text)
# Get a new string that has all the required new line characters
newlineString = splitString(text, widthOfGrob)
# If the newLineString is empty, the description did not contain characters, and no additional formatting is required
if(nchar(newlineString)==0)
return ("")
# Break on the newline characters, creating a string for each line
brokenStrings = strsplit(newlineString, "\n")
maxCharPerBrokenString = 0
for (s in brokenStrings)
maxCharPerBrokenString = max(maxCharPerBrokenString, nchar(s))
# For each line, create a subExpression in txt format that can be used to create the expressions
exprs = list()
for (i in 1:length(brokenStrings[[1]])){
# Split on <>'s
splittedSub = strsplit(brokenStrings[[1]][[i]], "<>")
charactersInSplit = 0
# Check how many splits we have - if there is only 1, we do not have to parse anything
if (length(splittedSub[[1]]) == 1){
subExpression = paste("textstyle(paste('", splittedSub[[1]][[1]], "',", sep = "" )
charactersInSplit = nchar(splittedSub[[1]])
}
if (length(splittedSub[[1]]) > 1){
# If there are diamonds present, we need to split and parse expressions
# Every even index is now a subExpression that we have to evaluate
subExpression = "textstyle(paste("
for (j in 1:length(splittedSub[[1]])){
if ((j%%2)==1){
subExpression = paste(subExpression, "'", splittedSub[[1]][[j]], "', ", sep = "" )
charactersInSplit = charactersInSplit+nchar(splittedSub[[1]][[j]])
}
if ((j%%2)==0){ # This is where the parsing will take place
subExpression = paste(subExpression, splittedSub[[1]][[j]], ", ", sep = "" )
#Compute how many extra characters we roughly need to add in whitespace because of the formatting.
inchesForParsed = widthDetails(
textGrob(parse(text=splittedSub[[1]][[j]]),  gp=gpar(fontfamily = fontfamily, fontsize = textSize))
)
inchesForRaw = widthDetails(
textGrob(splittedSub[[1]][[j]],  gp=gpar(fontfamily = fontfamily, fontsize = 200))
)
dInch = as.numeric(inchesForRaw) - as.numeric(inchesForParsed)
charactersInSplit = charactersInSplit+nchar(splittedSub[[1]][[j]]) - (dInch*14) #widthDetails does not care about the fontsize. If I assume it is 14 it seems to work sort of OK.
}
}
}
# Compute the extra number of white spaces we need to add to make up for the parsing
extraChars = round(maxCharPerBrokenString - charactersInSplit)
extraSpace = strrep(" ",extraChars)
subExpression = paste(subExpression, "'", extraSpace, "',", " sep=''))", sep = '')
exprs[[i]] = subExpression
}
# Combine all sub expression using nested  atop() commands (almost there!)
expression = ""
if (length(exprs) == 1)
expression = exprs[[1]]
if (length(exprs) > 2){
nestAtop = function(new, previous) { return ( paste("atop(", new, ",", previous, ")", sep = "")) }
expression = nestAtop(exprs[[length(exprs)-1]], exprs[[length(exprs)]])
for (i in rev(1:(length(exprs)-2)))
expression = nestAtop(exprs[[i]], expression)
# atop gives the first line a little more vertical space. So we have to make the first line blank
expression = nestAtop("''", expression)
}
return (expression)
}
# Transform a text by adding a newline character after every 'width'
splitString <- function (text, widthOfGrob) {
strings <- strsplit(text, " ")[[1]]
newstring <- strings[1]
linewidth <- stringWidth(newstring)
gapwidth <- stringWidth(" ")
availwidth <- convertWidth(widthOfGrob, "in", valueOnly = TRUE)
if (length(strings) != 1){
for (i in 2:length(strings)) {
if (grepl("<>", strings[i])){
adjustedString = gsub("<>", "", strings[i])
adjustedString = gsub("\\['", "", adjustedString)
adjustedString = gsub("'\\]", "", adjustedString)
widthOfGrob <- stringWidth(adjustedString)*0.9
}    else {
widthOfGrob <- stringWidth(strings[i])
}
if (convertWidth(linewidth + gapwidth + widthOfGrob, "in",
valueOnly = TRUE) < availwidth) {
sep <- " "
linewidth <- linewidth + gapwidth + widthOfGrob
}    else {
sep <- "\n"
linewidth <- widthOfGrob
}
newstring <- paste(newstring, strings[i], sep = sep)
}
}
newstring
}
createHeatPlotFromFile(inputFile = "C:/Users/jesse/Desktop/test2.csv", outputFile = "C:/Dropbox Mount/Dropbox/testtestteststuff/nameless.png", dimensions = list(list(var=list(varName = "resourceValueMean", longName = "Mean resource values", shortName = "Mean"), role = "xAxis",levels =c()), list(var=list(varName = "resourceValueSD", longName = "Standard deviation of resource values", shortName = "SD"), role = "yAxis",levels =c()), list(var=list(varName = "extrinsicEventMean", longName = "Mean extrinsic event values", shortName = "Mean"), role = "row",levels =c(0.0000000000,1.0000000000)), list(var=list(varName = "expectedCuesSampled", longName = "Optimal number of cues to sample", shortName = "Cues sampled"), role = "color",levels =c())), maxColor = -1.0, width = 5.0, height = 5.0, DPI = 100)
